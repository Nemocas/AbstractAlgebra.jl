###############################################################################
#
#   Submodule.jl : Submodules of modules
#
###############################################################################

export gens, ngens, sub, supermodule

###############################################################################
#
#   Reduced form
#
###############################################################################

reduced_form(mat::MatElem{T}) where T <: RingElement = hnf(mat)

function reduced_form(mat::MatElem{T}) where T <: FieldElement
  r, m = rref(mat)
  return m
end

isreduced_form(mat::MatElem{T}) where T <: RingElement = ishnf(mat)

isreduced_form(mat::MatElem{T}) where T <: FieldElement = isrref(mat)

###############################################################################
#
#   Submodule constructor
#
###############################################################################

@doc Markdown.doc"""
    sub(m::AbstractAlgebra.FPModule{T}, gens::Vector{<:AbstractAlgebra.FPModuleElem{T}}) where T <: RingElement

Return the submodule of the module `m` generated by the given generators,
given as elements of `m`.
"""
function sub(m::FPModule{T}, gens::Vector{S}) where {T <: RingElement, S <: FPModuleElem{T}}
   return Generic.sub(m, gens)
end

# Handles empty vector of elements
function sub(m::FPModule{T}, gens::Vector{Any}) where T <: RingElement
   return Generic.sub(m, gens)
end

# Also see sub in AbstractAlgebra.jl (must be defined after Generic)


